<?xml version="1.0" encoding="UTF-8"?>
<web-app version="2.4" xmlns="http://java.sun.com/xml/ns/j2ee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd">

	<!--
		This is the configuration file for Webical.
		Please visit http://www.webical.org for support.
	-->

	<display-name>Webical</display-name>
 	
 	<!-- 
 		Wicket configuration, the application class is injected by spring 
 	-->
 	<filter>
		<filter-name>wicket</filter-name>
		<filter-class>org.apache.wicket.protocol.http.WicketFilter</filter-class>
        <init-param>
            <param-name>applicationFactoryClassName</param-name>
            <param-value>org.apache.wicket.spring.SpringWebApplicationFactory</param-value>
        </init-param>
        <init-param>
        	<param-name>configuration</param-name>
        	<param-value>deployment</param-value>
        </init-param>
	</filter>
 	
	<filter-mapping>
		<filter-name>wicket</filter-name>
		<url-pattern>/app/*</url-pattern>
	</filter-mapping>

	<!--
		Configure Tomcat WebDAV Servlet to serve (only!) at /dav/webicaldemo.ics
	-->
	<!--
	<servlet>
		<servlet-name>webdav</servlet-name>
		<servlet-class>org.apache.catalina.servlets.WebdavServlet</servlet-class>
		<init-param>
			<param-name>debug</param-name>
			<param-value>0</param-value>
		</init-param>
		<init-param>
			<param-name>listings</param-name>
			<param-value>true</param-value>
		</init-param>
		<init-param>
			<param-name>readonly</param-name>
			<param-value>false</param-value>
		</init-param>
		<load-on-startup>1</load-on-startup>
	</servlet>

	<servlet-mapping>
		<servlet-name>webdav</servlet-name>
		<url-pattern>/dav/webicaldemo.ics</url-pattern>
	</servlet-mapping>
	-->

	<!-- 
		Spring configuration
	-->
	 
	<!-- Configure the location of the Spring configuration file (multiple files can be used) -->
	<context-param>
  		<param-name>contextConfigLocation</param-name>
		<param-value>/WEB-INF/applicationContext.xml</param-value>
	</context-param>
    
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>
  
	
	<!-- 
		Security configuration. Choose either FORM or BASIC authentication.
	 -->
	<login-config>
		<!--
			FORM based authentication, works with the authentication realm
		-->
		<auth-method>FORM</auth-method>
		<realm-name>Webical</realm-name>
		<form-login-config>
			<form-login-page>/login.jsp</form-login-page>
			<form-error-page>/fail_login.html</form-error-page>
		</form-login-config>
		<!--
			BASIC authentication
		<auth-method>BASIC</auth-method>
		<realm-name>Webical</realm-name>
		-->
	</login-config>

	<!--
		Security depends on a Realm definition (configured in the servlet container) that satifies an auth-constraint.

		The following is a Tomcat Realm definition - based on MySQL authentication - that can be placed in the Context definition for Webical.
		For Webical running in the /webical context on localhost, you can find the Context definition in:
		${tomcat_home}/conf/Catalina/localhost/webical.xml

	   <Realm className="org.apache.catalina.realm.JDBCRealm" debug="99"
		   driverName="com.mysql.jdbc.Driver"
		   connectionURL="jdbc:mysql://localhost:3306/auth?autoReconnect=true&amp;user=myusername&amp;password=mypassword"
		   userTable="_auth_user" userNameCol="username" userCredCol="userpass"
		   userRoleTable="auth_userrole" roleNameCol="role"/>

		Using this example, you'll need a database named 'auth' and a user 'myusername' with password 'mypassword' that has SELECT rights
		to the following tables:
		CREATE TABLE `_auth_user` ( `username` varchar(250) NOT NULL, `userpass` varchar(250) NOT NULL, PRIMARY KEY  (`username`)  )
			ENGINE=MyISAM DEFAULT CHARSET=latin1;
		CREATE TABLE `auth_userrole` ( `username` varchar(250) NOT NULL, `role` varchar(250) NOT NULL, PRIMARY KEY  (`username`,`role`)  )
			ENGINE=MyISAM DEFAULT CHARSET=latin1; 
		
		In order to login to webical, you'll need a user. For a user with username 'webical' and password 'webical', issue:
		INSERT INTO _auth_user (username, userpass) VALUES ("webical", "webical");

		And put that user in the right user role:
		INSERT INTO auth_userrole (username, role) VALUES ("webical", "webicaluser");
		Notice that 'webicaluser' is the auth-contraint that is required in the configuration below.

		In order to let Tomcat talk to MySQL:
		- Download the MySQL Java connector (Connector/J 5.0) from http://dev.mysql.com/downloads/connector/j/5.0.html
		- Extract mysql-connector-java-5.0.4-bin.jar to the tomcat/common/lib directory so that Tomcat can connect to the MySQL databases 

		Restart Tomcat, and the Realm should be present.

		After configuring the Resource specified below, you can enter your Webical installation with the user specs you entered just now.
	-->
	<security-constraint>
		<web-resource-collection>
			<web-resource-name>SecurityRestriction</web-resource-name>
			<description>Webical security</description>
			<url-pattern>/app/*</url-pattern>
			<http-method>GET</http-method>
			<http-method>POST</http-method>
		</web-resource-collection>
		<auth-constraint>
			<role-name>webicaluser</role-name>
		</auth-constraint>
	</security-constraint>
	<security-role>
		<description>Webical User</description>
		<role-name>webicaluser</role-name>
	</security-role>
	
	<!--
		The database connection should be made available as a Resource by the servlet container.

		The following is a Tomcat Resource - based on a MySQL database - that can be placed in the Context definition for Webical.
		For Webical running in the /webical context on localhost, you can find the Context definition in:
		${tomcat_home}/conf/Catalina/localhost/webical.xml

	   <Resource 
		  name="jdbc/calendarDataBase" 
		  auth="Container" 
		  type="javax.sql.DataSource" 
		  factory="org.apache.tomcat.dbcp.dbcp.BasicDataSourceFactory" 
		  username="myusername" 
		  password="mypassword" 
		  driverClassName="com.mysql.jdbc.Driver" 
		  url="jdbc:mysql://localhost:3306/webical?autoReconnect=true" />

		First, configure the Realm as specified above.

		Then, you'll need a MySQL user (username 'myusername' and password 'mypassword') that has
		SELECT, INSERT, UPDATE, DELETE, ALTER, INDEX, CREATE, DROP privileges on an empty 'webical' database.
		Perhaps it is the same user as you used for the Realm, no problem.

		After restarting Tomcat, Webical will automagically create all the tables for you.

		After logging in, you'll need to enter some configuration parameters, and then ... you're ready!
	-->
	<resource-env-ref>
		<description>Database Connection</description>
		<resource-env-ref-name>jdbc/calendarDataBase</resource-env-ref-name>
		<resource-env-ref-type>javax.sql.DataSource</resource-env-ref-type>
	</resource-env-ref>

</web-app>